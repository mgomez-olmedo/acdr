email[i, j] = email_data[[i, j]]
}
}
# Estimate the prior probabilities of vector class (unknown probability
# of change)
nat = 913 # Number of variables
nca = 1500 # Number of cases
alpha1 = 0.01 # lower value of the interval for probability of change
alpha2 = 0.02 # upper value of the interval for probability of change
n = 200 # Number of points for the probability interval
k = 20 # number of points for the interval of probability of change
probyes <- vector(mode = "double", length = nca)
probno <- vector(mode = "double", length = nca)
x <- email[, nat + 1]
param <- seq(0.0, 1.0, length = n + 1)
prob <- rep(1 / ((n + 1) * (k + 1)), (n + 1) * (k + 1))
prom <- matrix(prob, nrow = k + 1)
discount <- seq(alpha1, alpha2, length = k + 1)
delta <- (alpha2 - alpha1) / (k * k)
changeyes <- rep(0, length(x))
for (i in 1:k) {
discount[i + 1] = discount[i] + (2 * i - 1) * delta
}
for (i in 1:(length(x))) {
sumr <- rowSums(prom)
sumt <- sum(sumr)
for (l in 0:k) {
for (j in 0:n) {
prom[l + 1, j + 1] <-
(prom[l + 1, j + 1] * (1 - discount[l + 1]) + discount[l + 1] * (1 / (n +
1)) * sumr[l + 1]) / sumt
}
}
probparam <-  colSums(prom)
probparam <- probparam / sum(probparam)
sumr <- rowSums(prom)
sumt <- sum(sumr)
probdis <- sumr / sumt
probyes[i] <- sum(probparam * param)
changeyes[i] <- sum(probdis * discount)
if (x[i] == 1) {
for (l in 0:k) {
prom[l + 1, ] <- prom[l + 1, ] * param
}
}
else {
for (l in 0:k) {
prom[l + 1, ] <- prom[l + 1, ] * (1 - param)
}
}
}
# Estimate the conditional probabilities given the class, Bayesian method,
# not known probability of change
probcondyes <- vector(mode = "double", length = nca * nat)
probcondno <- vector(mode = "double", length = nca * nat)
condyeschange <- vector(mode = "double", length = nca * nat)
condnochange <- vector(mode = "double", length = nca * nat)
dim(probcondyes) = c(nca, nat)
dim(probcondno) =  c(nca, nat)
dim(condyeschange) = c(nca, nat)
dim(condnochange) =  c(nca, nat)
z <- email[, nat + 1]
for (ic in (1:nat)) {
x <- email[, ic]
for (yes in (0:1)) {
param <- seq(0.0, 0.1, length = n + 1)
prob <- rep(1 / ((n + 1) * (k + 1)), (n + 1) * (k + 1))
prom <- matrix(prob, nrow = k + 1)
discount <- seq(alpha1, alpha2, length = k + 1)
delta <- (alpha2 - alpha1) / (k * k)
for (i in 1:k) {
discount[i + 1] = discount[i] + (2 * i - 1) * delta
}
for (i in 1:(length(x))) {
for (l in 0:k) {
for (j in 0:n) {
prom[l + 1, j + 1] <-
(prom[l + 1, j + 1] * (1 - discount[l + 1]) + discount[l + 1] * (1 / (n +
1)) * sumr[l + 1]) / sumt
}
}
probparam <-  colSums(prom)
probparam <- probparam / sum(probparam)
sumr <- rowSums(prom)
sumt <- sum(sumr)
probdis <- sumr / sumt
if (yes == 1) {
probcondyes[i, ic] <- sum(probparam * param)
condyeschange[i, ic] <- sum(probdis * discount)
}
else {
probcondno[i, ic] <- sum(probparam * param)
condnochange[i, ic] <- sum(probdis * discount)
}
if (((yes == 1) && (z[i] == 1)) || ((yes == 0) &&
(z[i] == 0))) {
if (x[i] == 1) {
for (l in 0:k) {
prom[l + 1, ] <- prom[l + 1, ] * param
}
}
else {
for (l in 0:k) {
prom[l + 1, ] <- prom[l + 1, ] * (1 - param)
}
}
}
}
}
}
# Classify elements
# = 1 if 1 prior probability is used in the classification. If 0 prior
# probability is not used (equivalent to the uniform prior probability
good = 0
total = nca
for (i in (1:total)) {
proby = log(probyes[i]) * probprior
probn = log(1 - probyes[i]) * probprior
for (j in (1:658))
{
if (email[i, j] == 1) {
proby = proby + log(probcondyes[i, j])
probn = probn + log(probcondno[i, j])
}
else{
proby = proby + log(1 - probcondyes[i, j])
probn = probn + log(1 - probcondno[i, j])
}
}
if (proby > probn) {
result = 1
}
else{
result = 0
}
#  print(c(result,usenet[i,659]))
if (result == email[i, nat + 1]) {
good = good + 1
}
}
success = good / total
success
}
source('~/desarrollo/streams/acdr/R/email.R')
#' estimates the concept drift with email data
estimateEmail <- function() {
# read data
email_data <- readr::read_csv("./data/email_data.csv",
cols(.default = col_integer()),
col_names = TRUE)
# Compute a 0-1 matrix from email_data usenet
email <- vector(mode = "integer", length = 1500 * 914)
dim(email) = c(1500, 914)
for (j in 1:914) {
for (i in 1:1500) {
email[i, j] = email_data[[i, j]]
}
}
# Estimate the prior probabilities of vector class (unknown probability
# of change)
nat = 913 # Number of variables
nca = 1500 # Number of cases
alpha1 = 0.01 # lower value of the interval for probability of change
alpha2 = 0.02 # upper value of the interval for probability of change
n = 200 # Number of points for the probability interval
k = 20 # number of points for the interval of probability of change
probyes <- vector(mode = "double", length = nca)
probno <- vector(mode = "double", length = nca)
x <- email[, nat + 1]
param <- seq(0.0, 1.0, length = n + 1)
prob <- rep(1 / ((n + 1) * (k + 1)), (n + 1) * (k + 1))
prom <- matrix(prob, nrow = k + 1)
discount <- seq(alpha1, alpha2, length = k + 1)
delta <- (alpha2 - alpha1) / (k * k)
changeyes <- rep(0, length(x))
for (i in 1:k) {
discount[i + 1] = discount[i] + (2 * i - 1) * delta
}
for (i in 1:(length(x))) {
sumr <- rowSums(prom)
sumt <- sum(sumr)
for (l in 0:k) {
for (j in 0:n) {
prom[l + 1, j + 1] <-
(prom[l + 1, j + 1] * (1 - discount[l + 1]) + discount[l + 1] * (1 / (n +
1)) * sumr[l + 1]) / sumt
}
}
probparam <-  colSums(prom)
probparam <- probparam / sum(probparam)
sumr <- rowSums(prom)
sumt <- sum(sumr)
probdis <- sumr / sumt
probyes[i] <- sum(probparam * param)
changeyes[i] <- sum(probdis * discount)
if (x[i] == 1) {
for (l in 0:k) {
prom[l + 1, ] <- prom[l + 1, ] * param
}
}
else {
for (l in 0:k) {
prom[l + 1, ] <- prom[l + 1, ] * (1 - param)
}
}
}
# Estimate the conditional probabilities given the class, Bayesian method,
# not known probability of change
probcondyes <- vector(mode = "double", length = nca * nat)
probcondno <- vector(mode = "double", length = nca * nat)
condyeschange <- vector(mode = "double", length = nca * nat)
condnochange <- vector(mode = "double", length = nca * nat)
dim(probcondyes) = c(nca, nat)
dim(probcondno) =  c(nca, nat)
dim(condyeschange) = c(nca, nat)
dim(condnochange) =  c(nca, nat)
z <- email[, nat + 1]
for (ic in (1:nat)) {
x <- email[, ic]
for (yes in (0:1)) {
param <- seq(0.0, 0.1, length = n + 1)
prob <- rep(1 / ((n + 1) * (k + 1)), (n + 1) * (k + 1))
prom <- matrix(prob, nrow = k + 1)
discount <- seq(alpha1, alpha2, length = k + 1)
delta <- (alpha2 - alpha1) / (k * k)
for (i in 1:k) {
discount[i + 1] = discount[i] + (2 * i - 1) * delta
}
for (i in 1:(length(x))) {
for (l in 0:k) {
for (j in 0:n) {
prom[l + 1, j + 1] <-
(prom[l + 1, j + 1] * (1 - discount[l + 1]) + discount[l + 1] * (1 / (n +
1)) * sumr[l + 1]) / sumt
}
}
probparam <-  colSums(prom)
probparam <- probparam / sum(probparam)
sumr <- rowSums(prom)
sumt <- sum(sumr)
probdis <- sumr / sumt
if (yes == 1) {
probcondyes[i, ic] <- sum(probparam * param)
condyeschange[i, ic] <- sum(probdis * discount)
}
else {
probcondno[i, ic] <- sum(probparam * param)
condnochange[i, ic] <- sum(probdis * discount)
}
if (((yes == 1) && (z[i] == 1)) || ((yes == 0) &&
(z[i] == 0))) {
if (x[i] == 1) {
for (l in 0:k) {
prom[l + 1, ] <- prom[l + 1, ] * param
}
}
else {
for (l in 0:k) {
prom[l + 1, ] <- prom[l + 1, ] * (1 - param)
}
}
}
}
}
}
# Classify elements
# = 1 if 1 prior probability is used in the classification. If 0 prior
# probability is not used (equivalent to the uniform prior probability
good = 0
total = nca
for (i in (1:total)) {
proby = log(probyes[i]) * probprior
probn = log(1 - probyes[i]) * probprior
for (j in (1:658))
{
if (email[i, j] == 1) {
proby = proby + log(probcondyes[i, j])
probn = probn + log(probcondno[i, j])
}
else{
proby = proby + log(1 - probcondyes[i, j])
probn = probn + log(1 - probcondno[i, j])
}
}
if (proby > probn) {
result = 1
}
else{
result = 0
}
#  print(c(result,usenet[i,659]))
if (result == email[i, nat + 1]) {
good = good + 1
}
}
success = good / total
success
}
estimateEmail()
library(readr)
install.packages("readr")
estimateEmail()
source('~/desarrollo/streams/acdr/R/email.R')
estimateEmail()
install.packages("roxygen2")
estimateEmail()
source('~/desarrollo/streams/acdr/R/email.R')
estimateEmail()
source('~/desarrollo/streams/acdr/R/email.R')
estimateEmail()
devtools::use_package()
devtools::use_package(readr)
devtools::use_package("readr")
usethis::use_package("microbenchmark")
install.packages("microbenchmark")
usethis::use_package("microbenchmark")
usethis::use_package("parallel")
install.packages("utile.tables")
library(utils)
usethis::use_package("utils")
install.packages("rmarkdown")
source('~/desarrollo/streams/acdr/R/execution.R')
experiment("./extsdata/1-experiment-test")
experiment("./extdata/1-experiment-test")
source('~/desarrollo/streams/acdr/R/execution.R')
experiment("./extdata/1-experiment-test")
devtools::load_all()
experiment("./extdata/1-experiment-test")
devtools::load_all()
experiment("./extdata/1-experiment-test")
source('~/desarrollo/streams/acdr/R/estimate1.R')
experiment("./extdata/1-experiment-test")
source('~/desarrollo/streams/acdr/R/utils.R')
experiment("./extdata/1-experiment-test")
devtools::load_all()
experiment("./extdata/1-experiment-test")
experiment("./extdata/1-experiment-test")
source('~/desarrollo/streams/acdr/R/execution.R')
devtools::load_all()
source('~/desarrollo/streams/acdr/R/execution.R')
experiment("./extdata/1-experiment-test")
experiment("./extdata/1-experiment-test")
experiment("./extdata/1-experiment-test")
source('~/desarrollo/streams/acdr/R/execution.R')
experiment("./extdata/1-experiment-test")
experiment("./extdata/1-experiment-test")
devtools::load_all()
experiment("./extdata/1-experiment-test")
devtools::document()
experiment("./extdata/1-experiment-test")
devtools::document()
experiment("./extdata/1-experiment-test")
devtools::document()
experiment("./extdata/1-experiment-test")
devtools::load_all()
experiment("./extdata/1-experiment-test")
devtools::document()
devtools::load_all()
experiment("./extdata/1-experiment-test")
experiment("./extdata/1-experiment-test")
source('~/desarrollo/streams/acdr/R/estimate1.R')
experiment("./extdata/1-experiment-test")
source('~/desarrollo/streams/acdr/R/estimate1.R')
experiment("./extdata/1-experiment-test")
source('~/desarrollo/streams/acdr/R/estimate1.R')
experiment("./extdata/1-experiment-test")
sessionInfo()
source('~/desarrollo/streams/acdr/R/estimate1.R')
sessionInfo()
experiment("./extdata/1-experiment-test")
load(acdr)
load("acdr")
devtools::load_all()
source('~/desarrollo/streams/acdr/R/execution.R')
experiment("./extdata/1-experiment-test")
source('~/desarrollo/streams/acdr/R/estimate1.R')
source('~/desarrollo/streams/acdr/R/execution.R')
experiment("./extdata/1-experiment-test")
source('~/desarrollo/streams/acdr/R/estimate1.R')
experiment("./extdata/1-experiment-test")
source('~/desarrollo/streams/acdr/R/estimate1.R')
experiment("./extdata/1-experiment-test")
experiment("./extdata/1-experiment-test")
source('~/desarrollo/streams/acdr/R/estimate1.R')
experiment("./extdata/1-experiment-test")
environment()
devtools::document()
experiment("./extdata/1-experiment-test")
source('~/desarrollo/streams/acdr/R/estimate1.R')
experiment("./extdata/1-experiment-test")
source('~/desarrollo/streams/acdr/R/estimate1.R')
experiment("./extdata/1-experiment-test")
librara("acdr")
library("acdr")
experiment("./extdata/1-experiment-test")
library(acdr)
experiment("./extdata/1-experiment-test")
library(acdr)
experiment("./extdata/1-experiment-test")
library(acdr)
experiment("./extdata/1-experiment-test")
experiment("./extdata/2-experiment-test")
experiment("./extdata/3-experiment-test")
experiment("./extdata/4-experiment-test")
experiment("./extdata/5-experiment-test")
library(acdr)
experiment("./extdata/1-experiment-test")
library(acdr)
experiment("./extdata/5-experiment-test")
experiment("./extdata/5-experiment-test")
experiment("./extdata/6-experiment-test")
experiment("./extdata/6-experiment-test")
experiment("./extdata/7-experiment-test")
experiment("./extdata/8-experiment-test")
experiment("./extdata/9-experiment-test")
library(acdr)
experiment("./extdata/9-experiment-test")
experiment("./extdata/9-experiment-test")
experiment("./extdata/10-experiment-test")
library(acdr)
experiment("./extdata/10-experiment-test")
experiment("./extdata/11-experiment-test")
experiment("./extdata/12-experiment-test")
experiment("./extdata/13-experiment-test")
experiment("./extdata/14-experiment-test")
experiment("./extdata/15-experiment-test")
install.packages("ggplot2")
library(acdr)
devtools::use_package()
usethis::use_package(ggplot2)
usethis::use_package("ggplot2")
source('~/desarrollo/streams/acdr/R/resultUtils.R')
library(acdr)
library(acdr)
files <- getFilesForMethod(3)
length(files)
getArgumentValues("./results/12-2-n-25-alpha-0.001-alpha2-0.0001.res")
values <- getArgumentValues("./results/12-2-n-25-alpha-0.001-alpha2-0.0001.res")
values
files
getValuesForArgument(files, "ro")
generatePlot(12, "12-2-n-25-alpha1-0.001-alpha2-0.001.res")
plotResultForCombination(files,"ro")
data <- classifyResultFilesForMethod(3)
plotResultForCombination(data,"ro")
source('~/desarrollo/streams/acdr/R/resultUtils.R')
data
plotResultForCombination(3,data,"ro")
result1 <- processResultFiles(data)data
result1 <- processResultFiles(data)
data
result1 <- processResultFiles(data)
processResultFilesMethod(3)
mat1 <- getResultsMatrix(3)
library(acdr)
generateLatexReport(3)
source('~/desarrollo/streams/acdr/R/resultUtils.R')
generateLatexReport(3)
source('~/desarrollo/streams/acdr/R/resultUtils.R')
generateLatexReport(3)
source('~/desarrollo/streams/acdr/R/resultUtils.R')
generateLatexReport(3)
plotSerieResults(3, "ro")
mat <- getResultsMatrix(34)
mat <- getResultsMatrix(3)
mat
plotSerieResults(3, "klMean")
plotSerieResults(3, "klStdev")
plotSerieResults(3, "timeMean")
plotSerieResults(3, "timeStdev")
mat
plot <- plotSerieResultsGgplot(mat, "ro","klMean")
pdf(file="./resultDocus/images/3-klMean.pdf")
pdf(file="./resultDocus/images/3-klMean.pdf")
plot()
dev.off()
matrix <- mat
plot <- plotSerieResultsGgplot(matrix, "ro","klMean")
pdf(file="./resultDocus/images/3-klMean.pdf")
plot()
plot <- plotSerieResultsGgplot(matrix, "ro","klMean")
plot
plot <- plotSerieResultsGgplot(matrix, "ro","klMean")
pdf(file="./resultDocus/images/3-klMean.pdf")
plot
dev.off()
methods <- c(34, 34, 34, 35, 36, 4, 3, 7, 8, 11, 15, 21, 23, 24)
algorithms <- c("BAF01", "BAF001", "BAF0001", "BFV1", "BFV2", "FW68", "FF", "SWB", "SWF", "ADWIN", "SWMTF", "SWMTFIn", "SWMTB", "SWMTBIn")
arguments <- list(
c(n=100, alpha=0.01),
c(n=100, alpha=0.001),
c(n=100, alpha=0.0001),
c(n=100, alpha1=0.0001, alpha2=0.01, k=10),
c(n=100, alpha1=0.0001, alpha2=0.01, k=10),
c(n=68),
c(ro=0.97),
c(n=20, alpha=0.04),
c(n=28, alpha=0.006),
c(delta=0.2),
c(alpha=0.01),
c(n=5, alpha=0.01),
c(alpha=0.06),
c(n=5, alpha=0.008)
)
matrix <- generateGlobalMatrixForTest(methods, arguments)
source('~/desarrollo/streams/acdr/R/resultUtils.R')
matrix <- generateGlobalMatrixForTest(methods, arguments)
source('~/desarrollo/streams/acdr/R/resultUtils.R')
matrix <- generateGlobalMatrixForTest(methods, arguments)
source('~/desarrollo/streams/acdr/R/resultUtils.R')
matrix <- generateGlobalMatrixForTest(methods, arguments)
matrix <- generateGlobalMatrixForTest(methods, arguments)
